const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const { getRandomReferences, getResearchTemplate, LEGAL_TERMS } = require('./law-references.js');

// Load environment variables
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

// ูุงุฆูุฉ ููุงุชูุญ API ูุชุนุฏุฏุฉ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
const API_KEYS = [];

// ุฅุถุงูุฉ ููุงุชูุญ Gemini ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
if (process.env.GEMINI_API_KEY) {
  API_KEYS.push({
    key: process.env.GEMINI_API_KEY,
    type: 'gemini',
    name: 'Gemini'
  });
}

if (process.env.GEMINI_API_KEY_1) {
  API_KEYS.push({
    key: process.env.GEMINI_API_KEY_1,
    type: 'gemini',
    name: 'Gemini 1'
  });
}

if (process.env.GEMINI_API_KEY_2) {
  API_KEYS.push({
    key: process.env.GEMINI_API_KEY_2,
    type: 'gemini',
    name: 'Gemini 2'
  });
}

// ุฅุฒุงูุฉ ุฏุนู DeepSeek - ุงูุชุทุจูู ุณูุณุชุฎุฏู Gemini ููุท

// ุงูุชุฃูุฏ ูู ูุฌูุฏ ููุชุงุญ ูุงุญุฏ ุนูู ุงูุฃูู
if (API_KEYS.length === 0) {
  console.error('๐ด ุฎุทุฃ ูุงุฏุญ: ูู ูุชู ุงูุนุซูุฑ ุนูู ููุงุชูุญ API ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ. ูุฑุฌู ุชุนููู GEMINI_API_KEY.');
  process.exit(1); // In a real deployment, you'd want the app to fail fast.
}

// ูุงุฆูุฉ ุงูููุงุฐุฌ ุงููุฏุนููุฉ - Gemini ููุท
const SUPPORTED_MODELS = {
  'gemini-2.0-flash': {
    provider: 'gemini',
    name: 'Gemini 2.0 Flash',
    maxTokens: 4000,
    free: true
  },
  'gemini-1.5-flash': {
    provider: 'gemini', 
    name: 'Gemini 1.5 Flash',
    maxTokens: 4000,
    free: true
  }
};

// ูุชุบูุฑุงุช ูุฅุฏุงุฑุฉ ุงูููุงุชูุญ
let currentKeyIndex = 0;
let keyUsageCount = {};
let keyFailureCount = {};

// ุชููุฆุฉ ุฅุญุตุงุฆูุงุช ุงูููุงุชูุญ
API_KEYS.forEach((key, index) => {
  keyUsageCount[index] = 0;
  keyFailureCount[index] = 0;
});

// ุฏุงูุฉ ููุญุตูู ุนูู ุงูููุชุงุญ ุงูููุงุณุจ ูููููุฐุฌ ูุน ุญูุงูุฉ ูู ุงูุญููุงุช ุงููุงููุงุฆูุฉ
function getAPIKeyForModel(modelName, preferredProvider = null) {
  const model = SUPPORTED_MODELS[modelName];
  if (!model) {
    throw new Error(`ูููุฐุฌ ุบูุฑ ูุฏุนูู: ${modelName}`);
  }
  
  // ุงูุชุฃูุฏ ูู ูุฌูุฏ ููุงุชูุญ ูู ุงููุธุงู
  if (!API_KEYS || API_KEYS.length === 0) {
    throw new Error('ูุง ุชูุฌุฏ ููุงุชูุญ API ูุชุงุญุฉ');
  }
  
  // ุงูุจุญุซ ุนู ููุชุงุญ ููุงุณุจ ูููููุฐุฌ
  const compatibleKeys = API_KEYS.filter((keyObj, index) => 
    keyObj && keyObj.type === model.provider && keyFailureCount[index] < 5
  );
  
  if (compatibleKeys.length === 0) {
    // ุฅุฐุง ูู ุชูุฌุฏ ููุงุชูุญ ูุชูุงููุฉุ ุฌุฑุจ ููุงุชูุญ ุฃุฎุฑู ูุจุฏูู
    const fallbackKeys = API_KEYS.filter((keyObj, index) => 
      keyObj && keyFailureCount[index] < 10
    );
    
    if (fallbackKeys.length === 0) {
      throw new Error(`ุฌููุน ุงูููุงุชูุญ ูุนุทูุฉ ูุคูุชุงู`);
    }
    
    // ุงุณุชุฎุฏู ููุชุงุญ ูุชูุงูู ููุทุ ูุง ุชุฎูุท ุจูู ุงูุฃููุงุน
    console.log(`โ ูุง ููุฌุฏ ููุชุงุญ ูุชูุงูู ูููููุฐุฌ ${modelName}`);
    throw new Error(`ูุง ููุฌุฏ ููุชุงุญ ูุชูุงูู ูููููุฐุฌ: ${modelName}`);
  }
  
  // ุงุฎุชูุงุฑ ุงูููุชุงุญ ุงูุฃูู ุงุณุชุฎุฏุงูุงู (ูุญุฏูุฏ ุจุนุฏุฏ ุงูููุงุชูุญ ูุชุฌูุจ ุงูุญููุฉ ุงููุงููุงุฆูุฉ)
  let bestKey = compatibleKeys[0];
  let bestIndex = API_KEYS.indexOf(bestKey);
  let minUsage = keyUsageCount[bestIndex];
  
  // ุญููุฉ ูุญุฏูุฏุฉ ูุขููุฉ
  for (let i = 0; i < Math.min(compatibleKeys.length, 10); i++) {
    const keyObj = compatibleKeys[i];
    const index = API_KEYS.indexOf(keyObj);
    if (keyUsageCount[index] < minUsage) {
      minUsage = keyUsageCount[index];
      bestKey = keyObj;
      bestIndex = index;
    }
  }
  
  currentKeyIndex = bestIndex;
  keyUsageCount[currentKeyIndex]++;
  
  console.log(`ุงุณุชุฎุฏุงู ${bestKey.name} (${currentKeyIndex + 1}), ุนุฏุฏ ุงูุงุณุชุฎุฏุงูุงุช: ${keyUsageCount[currentKeyIndex]}`);
  
  return bestKey;
}

// ุฏุงูุฉ ูุจูุงุก URL ุญุณุจ ููุน API
function buildAPIURL(keyObj, modelName) {
  switch (keyObj.type) {
    case 'gemini':
      return `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${keyObj.key}`;
    default:
      throw new Error(`ููุน API ุบูุฑ ูุฏุนูู: ${keyObj.type}. ูุฏุนู ุงูุชุทุจูู Gemini ููุท.`);
  }
}

// ุฏุงูุฉ ูุฅุนุงุฏุฉ ุชุนููู ุฅุญุตุงุฆูุงุช ุงูููุงุชูุญ
function resetKeyStats() {
  API_KEYS.forEach((key, index) => {
    keyUsageCount[index] = Math.floor(keyUsageCount[index] / 2);
    keyFailureCount[index] = Math.max(0, keyFailureCount[index] - 1);
  });
  console.log('ุชู ุฅุนุงุฏุฉ ุชุนููู ุฅุญุตุงุฆูุงุช ุงูููุงุชูุญ');
}

app.use(bodyParser.json());
app.use(express.static(path.join(__dirname)));

// Enhanced configuration for better academic research
const RESEARCH_CONFIG = {
  temperature: 0.7,
  maxTokens: 4000, // ุชูููู ุฃูุซุฑ ูุชุฌูุจ ุงูุฃุฎุทุงุก
  topP: 0.8,
  topK: 30
};

// ูุธุงู ุฅุฏุงุฑุฉ ุงูุทูุจุงุช ุงููุญุณู
let requestCount = 0;
const MAX_REQUESTS_PER_MINUTE = 100; // ุฒูุงุฏุฉ ุงูุญุฏ ุจุดูู ูุจูุฑ
let lastResetTime = Date.now();
let isResetting = false;

// ุชูุธูู ูุนุฏุงุฏ ุงูุทูุจุงุช ูู 15 ุซุงููุฉ
setInterval(() => {
  if (!isResetting) {
    isResetting = true;
    requestCount = Math.max(0, requestCount - 5); // ุชูููู ุชุฏุฑูุฌู
    lastResetTime = Date.now();
    console.log(`ุชู ุชูููู ูุนุฏุงุฏ ุงูุทูุจุงุช ุฅูู: ${requestCount}`);
    isResetting = false;
  }
}, 15000);

// ุฅุนุงุฏุฉ ุชุนููู ูุงููุฉ ูู ุฏูููุฉ
setInterval(() => {
  requestCount = 0;
  lastResetTime = Date.now();
  resetKeyStats(); // ุฅุนุงุฏุฉ ุชุนููู ุฅุญุตุงุฆูุงุช ุงูููุงุชูุญ ุฃูุถุงู
  console.log('ุฅุนุงุฏุฉ ุชุนููู ูุงููุฉ ููุนุฏุงุฏ ุงูุทูุจุงุช ูุงูููุงุชูุญ');
}, 60000);

app.post('/research', async (req, res) => {
  // ุฅุถุงูุฉ ูููุฉ ุฒูููุฉ ูุตูู ููุนูููุฉ ุจุฃููููุง (5 ุฏูุงุฆู)
  const requestTimeout = setTimeout(() => {
    console.log('๐ด ุงูุชูุช ุงููููุฉ ุงูุฒูููุฉ ููุทูุจ');
    if (!res.headersSent) {
      res.status(408).json({
        error: {
          message: 'ุงูุชูุช ุงููููุฉ ุงูุฒูููุฉ ููุทูุจ. ุญุงูู ูุฑุฉ ุฃุฎุฑู.',
          type: 'ูููุฉ ุฒูููุฉ',
          suggestion: 'ุฌุฑุจ ุชูููู ุญุฌู ุงููุต ุฃู ุงุณุชุฎุฏู ูููุฐุฌ ุฃุณุฑุน'
        }
      });
    }
  }, 300000); // 5 ุฏูุงุฆู

  try {
    // ูุญุต ุจุณูุท ููุนุฏู ุงูุทูุจุงุช
    requestCount++;
    console.log(`ุทูุจ ุฑูู: ${requestCount}`);
    
    // ููุท ูู ุญุงูุฉ ุงูุทูุจุงุช ุงูููุฑุทุฉ
    if (requestCount > MAX_REQUESTS_PER_MINUTE) {
      console.log('ุชุฌุงูุฒ ุงูุญุฏ ุงููุณููุญ - ุชุฃุฎูุฑ ูุคูุช');
      await new Promise(resolve => setTimeout(resolve, 2000)); // ุงูุชุธุงุฑ ุซุงููุชูู
      requestCount = Math.floor(requestCount / 2); // ุชูููู ุงููุนุฏุงุฏ
    }
    const { prompt, type = 'simple', selectedModel = 'gemini-2.0-flash', apiKey } = req.body;
    
    // Enhanced prompt for better academic results based on selected model
    let enhancedPrompt = prompt;
    
    // ุชุญุณูู ุงููุต ุญุณุจ ุงููููุฐุฌ ุงููุญุฏุฏ - Gemini ููุท
    if (selectedModel.includes('gemini-2.0')) {
      enhancedPrompt = `ุจุงุณุชุฎุฏุงู ุฃุญุฏุซ ูุนุงููุฑ ุงูุจุญุซ ุงููุงูููู ูุงูุฃูุงุฏูููุ ${enhancedPrompt}`;
    } else if (selectedModel.includes('gemini')) {
      enhancedPrompt = `ูุฎุจูุฑ ูุงูููู ุฃูุงุฏููู ูุชูุฑุณ ูู ุงูุชุญููู ุงูุนููู ูุงูุฏูููุ ${enhancedPrompt}`;
    }
    
    if (type === 'academic') {
      enhancedPrompt = `
${prompt}

ุชุนูููุงุช ูููุฉ ูุถูุงู ุฌูุฏุฉ ุงูุจุญุซ:

1. **ุงููููู ุงูุฃูุงุฏููู:**
   - ุงุชุจุน ุงูุชุณูุณู ุงููุฑูู: ูุจุญุซ โ ูุทูุจ โ ูุฑุน
   - ุฑูู ูู ุนูุตุฑ ุจูุถูุญ
   - ุงุณุชุฎุฏู ุงูุนูุงููู ุงููุงุถุญุฉ ูุงููุญุฏุฏุฉ

2. **ุงููุญุชูู ุงูุนููู:**
   - ุงูุชุจ ููุฏูุฉ ุดุงููุฉ ุชุชุถูู ุงูุฅุดูุงููุฉ ูุฃูููุฉ ุงูููุถูุน
   - ุงุณุชุฎุฏู ุงูุชุนุฑููุงุช ุงูุฏูููุฉ ูููุตุทูุญุงุช
   - ุงุฐูุฑ ุขุฑุงุก ูุชููุนุฉ ูููููุงุก ูุงูุจุงุญุซูู
   - ูุฏู ุฃูุซูุฉ ุนูููุฉ ูุชุทุจูููุฉ
   - ุงุฑุจุท ุจูู ุงููุธุฑูุฉ ูุงูุชุทุจูู

3. **ุงููุฑุงุฌุน ูุงูููุงูุด:**
   - ุงูุชุจ ููุงูุด ูุฑููุฉ ูู ููุงูุฉ ูู ููุฑุฉ ูููุฉ
   - ุงุณุชุฎุฏู ุชูุณูู ุงููุฑุงุฌุน ุงูุฃูุงุฏููู: ุงุณู ุงููุคููุ ุนููุงู ุงููุชุงุจุ ุฏุงุฑ ุงููุดุฑุ ููุงู ุงููุดุฑุ ุณูุฉ ุงููุดุฑุ ุฑูู ุงูุตูุญุฉ
   - ููุน ุงููุฑุงุฌุน (ูุชุจุ ุฑุณุงุฆูุ ููุงูุงุชุ ููุงูููุ ููุงูุน ููุซููุฉ)
   - ุงุณุชุฎุฏู ูุฑุงุฌุน ุญุฏูุซุฉ (ุขุฎุฑ 10-15 ุณูุฉ)

4. **ุงูุฃุณููุจ ุงูุฃูุงุฏููู:**
   - ุงุณุชุฎุฏู ุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตูุญุฉ
   - ุชุฌูุจ ุงูุถูุงุฆุฑ ุงูุดุฎุตูุฉ
   - ุงุณุชุฎุฏู ุงูุฃุณููุจ ุงูููุถูุนู ูุงูููุทูู
   - ุงูุชุจ ููุฑุงุช ูุชูุงุฒูุฉ ููุชุฑุงุจุทุฉ

5. **ุงูุฎุงุชูุฉ ูุงูุชูุตูุงุช:**
   - ูุฎุต ุฃูู ุงููุชุงุฆุฌ
   - ูุฏู ุชูุตูุงุช ุนูููุฉ
   - ุงูุชุฑุญ ูุฌุงูุงุช ููุจุญุซ ุงููุณุชูุจูู

6. **ุงูุชูุณูู:**
   - ุถุน ุฑูู ุงูุตูุญุฉ ูู ุฃุณูู ูู ุตูุญุฉ
   - ุงุณุชุฎุฏู ุงูุชุจุงุนุฏ ุงูููุงุณุจ ุจูู ุงูุฃุณุทุฑ
   - ููุฒ ุงูุนูุงููู ุงูุฑุฆูุณูุฉ ูุงููุฑุนูุฉ

ุงูุฑุฌุงุก ูุชุงุจุฉ ุจุญุซ ุดุงูู ูููุตู ููุชุฒู ุจูุฐู ุงููุนุงููุฑ ุงูุฃูุงุฏูููุฉ.
      `;
    }
    
    const requestBody = {
      contents: [{
        parts: [{
          text: enhancedPrompt
        }]
      }],
      generationConfig: {
        temperature: RESEARCH_CONFIG.temperature,
        maxOutputTokens: RESEARCH_CONFIG.maxTokens,
        topP: RESEARCH_CONFIG.topP,
        topK: RESEARCH_CONFIG.topK,
        candidateCount: 1,
        stopSequences: []
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH", 
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };
    
    console.log(`ุฅุฑุณุงู ุทูุจ ุงูุจุญุซ ุจุงุณุชุฎุฏุงู ุงููููุฐุฌ: ${selectedModel}`);
    
    // ุงูุชุญูู ูู ุชูุงูู ุงููููุฐุฌ ูุจู ุงูุจุฏุก
    const model = SUPPORTED_MODELS[selectedModel];
    if (!model) {
      throw new Error(`ุงููููุฐุฌ ${selectedModel} ุบูุฑ ูุฏุนูู`);
    }
    
    // ุงูุญุตูู ุนูู ุงูููุชุงุญ ุงูููุงุณุจ ูููููุฐุฌ
    let keyObj;
    
    // ูู ุงูุจูุฆุฉ ุงูููุดูุฑุฉุ ูุฌุจ ุฃู ูุฃุชู ุงูููุชุงุญ ุฏุงุฆููุง ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
    try {
      keyObj = getAPIKeyForModel(selectedModel);
    } catch (keyError) {
      console.log(`โ ${keyError.message}`);
      // This error will be caught and sent as a 500 response
      throw new Error('ูุง ููุฌุฏ ููุชุงุญ Gemini API ุตุงูุญ ูุชุงุญ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ุนูู ุงูุฎุงุฏู.');
    }
    
    try {
        
        const apiUrl = buildAPIURL(keyObj, selectedModel);
        console.log(`๐ ุงุณุชุฎุฏุงู ${keyObj.name} ูููููุฐุฌ ${selectedModel}`);
        
        // ุจูุงุก ูุญุชูู ุงูุทูุจ ุญุณุจ ููุน API
        let requestBody;
        let headers = { 'Content-Type': 'application/json' };
        
        if (keyObj.type === 'gemini') {
          requestBody = {
            contents: [
              {
                parts: [
                  {
                    text: enhancedPrompt
                  }
                ]
              }
            ],
            generationConfig: {
              temperature: RESEARCH_CONFIG.temperature,
              maxOutputTokens: RESEARCH_CONFIG.maxTokens,
              topP: RESEARCH_CONFIG.topP,
              topK: RESEARCH_CONFIG.topK,
              candidateCount: 1,
              stopSequences: []
            },
            safetySettings: [
              {
                category: "HARM_CATEGORY_HARASSMENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                category: "HARM_CATEGORY_HATE_SPEECH", 
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              },
              {
                category: "HARM_CATEGORY_DANGEROUS_CONTENT",
                threshold: "BLOCK_MEDIUM_AND_ABOVE"
              }
            ]
          };
        } else {
          throw new Error(`ููุน API ุบูุฑ ูุฏุนูู: ${keyObj.type}. ูุฏุนู ุงูุชุทุจูู Gemini ููุท.`);
        }
        
        // ุฅุฑุณุงู ุงูุทูุจ
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: headers,
          body: JSON.stringify(requestBody)
        });
        
        console.log(`โ ุชู ุฅุฑุณุงู ุงูุทูุจ ุจุงุณุชุฎุฏุงู ${keyObj.name}`);
        
       // ูุนุงูุฌุฉ ุงูุงุณุชุฌุงุจุฉ
         if (!response.ok) {
          const errorText = await response.text();
          console.error('ุฎุทุฃ ูู Gemini API:', response.status, errorText);
          
          let errorMessage = 'ุฎุทุฃ ุบูุฑ ูุนุฑูู ูู Gemini API';
          
          if (response.status === 400) {
            errorMessage = 'ุงูุจูุงูุงุช ุงููุฑุณูุฉ ุบูุฑ ุตุญูุญุฉ. ุชุญูู ูู ุงููุฏุฎูุงุช.';
          } else if (response.status === 401) {
            errorMessage = 'ุฎุทุฃ ูู ููุชุงุญ API. ุชุญูู ูู ุตุญุฉ ุงูููุชุงุญ.';
          } else if (response.status === 403) {
            errorMessage = 'ุชู ุชุฌุงูุฒ ุงูุญุตุฉ ุงูููููุฉ ูู API. ุงูุฑุฌุงุก ุงููุญุงููุฉ ุบุฏุงู ุฃู ุงุณุชุฎุฏุงู ููุชุงุญ ุขุฎุฑ.';
          } else if (response.status === 429) {
            errorMessage = 'ุทูุจุงุช ูุซูุฑุฉ ุฌุฏุงู. ุงูุชุธุฑ ุฏูููุฉ ูุงุญุฏุฉ.';
          }
          
          throw new Error(errorMessage);
        }
        
        const data = await response.json();
        console.log('ุงุณุชูุงู ุงุณุชุฌุงุจุฉ ูู API');
        
        // ุงุณุชุฎุฑุงุฌ ุงููุต ูู ุงุณุชุฌุงุจุฉ Gemini
        const text = data.candidates?.[0]?.content?.parts?.[0]?.text;
        if (!text) {
          console.error('ุงุณุชุฌุงุจุฉ Gemini ูุงุฑุบุฉ:', JSON.stringify(data, null, 2));
          throw new Error('ูู ูุชู ุงูุนุซูุฑ ุนูู ูุต ูู ุงุณุชุฌุงุจุฉ Gemini');
        }
        
        // ุชูุณูู ุงููุต
        const formattedText = formatAcademicResponse(text, type);
        
        // ุชูุธูู ุงููููุฉ ุงูุฒูููุฉ ุนูุฏ ุงููุฌุงุญ
        clearTimeout(requestTimeout);
        
        res.json({
          research: formattedText,
          metadata: {
            type: type,
            timestamp: new Date().toISOString(),
            wordCount: text.split(' ').length,
            processing_time: Date.now(),
            model_used: selectedModel
          }
        });
        
      } catch (error) {
        console.error('ุฎุทุฃ ูู ุงูุจุญุซ:', error);
        
        // ุชูุธูู ุงููููุฉ ุงูุฒูููุฉ ุนูุฏ ุงูุฎุทุฃ
        clearTimeout(requestTimeout);
        
        res.status(500).json({
          error: {
            message: error.message,
            type: 'ุฎุทุฃ ูู ุงููุนุงูุฌุฉ'
          }
        });
      }
  } catch (error) {
    console.error('ุฎุทุฃ ูู ุงูุจุญุซ:', error);
    
    // ุชูููู ุนุฏุงุฏ ุงูุทูุจุงุช ูู ุญุงูุฉ ุงูุฎุทุฃ
    if (requestCount > 0) {
      requestCount--;
    }
    
    let errorDetails = {
      message: error.message,
      type: 'ุบูุฑ ูุนุฑูู',
      timestamp: new Date().toISOString(),
      suggestion: 'ุญุงูู ูุฑุฉ ุฃุฎุฑู ุฎูุงู ุฏูููุฉ ูุงุญุฏุฉ'
    };
    
    if (error.message.includes('401') || error.message.includes('unauthorized')) {
      errorDetails = {
        message: 'ุฎุทุฃ ูู ูุตุงุฏูุฉ ููุชุงุญ Gemini API.',
        type: 'ูุดููุฉ ุงููุตุงุฏูุฉ',
        suggestion: 'ุชุญูู ูู ุตุญุฉ ููุชุงุญ API ูู ุฅุนุฏุงุฏุงุช ุงูุฎุงุฏู'
      };
    } else if (error.message.includes('quota') || error.message.includes('429')) {
      errorDetails = {
        message: 'ุชู ุชุฌุงูุฒ ุงูุญุฏ ุงููุณููุญ ูู ุงูุทูุจุงุช ูุคูุชุงู.',
        type: 'ุชุฌุงูุฒ ุงูุญุตุฉ',
        suggestion: 'ุงูุชุธุฑ 30 ุซุงููุฉ ูุจู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู'
      };
    } else if (error.message.includes('model') || error.message.includes('400')) {
      errorDetails = {
        message: 'ุฎุทุฃ ูู ุงูุจูุงูุงุช ุงููุฑุณูุฉ ุฃู ุงููููุฐุฌ ุงููุณุชุฎุฏู.',
        type: 'ุฎุทุฃ ูู ุงูุจูุงูุงุช',
        suggestion: 'ุชุญูู ูู ุตุญุฉ ุงููุฏุฎูุงุช ูุญุงูู ูุฑุฉ ุฃุฎุฑู'
      };
    } else if (error.message.includes('ูุง ููุฌุฏ ููุชุงุญ ูุชูุงูู') || error.message.includes('ุบูุฑ ูุฏุนูู') || error.message.includes('404')) {
      errorDetails = {
        message: 'ุงููููุฐุฌ ุงููุญุฏุฏ ุบูุฑ ูุชุงุญ ุญุงููุงู ุฃู ุบูุฑ ูุฏุนูู.',
        type: 'ูููุฐุฌ ุบูุฑ ูุชุงุญ',
        suggestion: 'ุงุณุชุฎุฏู ูููุฐุฌ Gemini 2.0 Flash ููุญุตูู ุนูู ุฃูุถู ุงููุชุงุฆุฌ'
      };
    } else if (error.message.includes('timeout') || error.code === 'ECONNRESET') {
      errorDetails = {
        message: 'ุงูุชูุช ูููุฉ ุงูุงุชุตุงู ูุน ุงูุฎุงุฏู.',
        type: 'ูููุฉ ุงูุงุชุตุงู',
        suggestion: 'ุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช ูุญุงูู ูุฑุฉ ุฃุฎุฑู'
      };
    } else if (error.message.includes('ENOTFOUND') || error.message.includes('network')) {
      errorDetails = {
        message: 'ูุดููุฉ ูู ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช.',
        type: 'ูุดููุฉ ุงูุดุจูุฉ',
        suggestion: 'ุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช'
      };
    }
    
    res.status(500).json({
      error: errorDetails
    });
  } finally {
    // ุชูุธูู ุงููููุฉ ุงูุฒูููุฉ
    clearTimeout(requestTimeout);
  }
});

// Function to format responses based on type
function formatAcademicResponse(text, type) {
  let formatted = text;
  
  switch(type) {
    case 'academic':
      // Enhanced formatting for academic papers
      formatted = formatted.replace(/^(ุงููุจุญุซ|ุงููุทูุจ|ุงููุฑุน|ุงูุฎุงุชูุฉ|ุงูููุฏูุฉ)/gm, '\n\n$1');
      formatted = formatted.replace(/\(\d+\)/g, '$&\n');
      formatted = formatted.replace(/(ุงููุจุญุซ ุงูุซุงูู|ุงููุจุญุซ ุงูุซุงูุซ|ุงููุจุญุซ ุงูุฑุงุจุน)/g, '\n[ุตูุญุฉ ุฌุฏูุฏุฉ]\n\n$1');
      formatted = formatted.replace(/\n{3,}/g, '\n\n');
      break;
      
    case 'summary':
      // Format for lesson summaries
      formatted = formatted.replace(/^(\d+\.|[ุฃุงุจุฌุฏ]\.)/gm, '\n$1');
      formatted = formatted.replace(/^(ุงูุชุนุฑูู:|ุงูููููู:|ุงูููุทุฉ ุงูุฃุณุงุณูุฉ:)/gm, '\n\n**$1**');
      break;
      
    case 'preparation':
      // Format for research preparation
      formatted = formatted.replace(/^(\d+\.\s)/gm, '\n$1');
      formatted = formatted.replace(/^(ุงููุฑุงุฌุน:|ุงูุฃุณุฆูุฉ:|ุงูุฎุทุฉ:)/gm, '\n\n**$1**');
      break;
      
    case 'quiz':
      // Keep quiz format as is for parsing
      break;
      
    default:
      // Default formatting
      formatted = formatted.replace(/\n{3,}/g, '\n\n');
  }
  
  return formatted.trim();
}

// ุฏุงูุฉ ุงูุชุฑุงุญุงุช ุญู ุงูุฃุฎุทุงุก
function getErrorSuggestion(statusCode) {
  const suggestions = {
    400: 'ุชุญูู ูู ุตุญุฉ ุนููุงู ุงูุจุญุซ ูุงููุฏุฎูุงุช',
    401: 'ุชุญูู ูู ููุชุงุญ Gemini API ูู ููู server.js',
    403: 'ุชุฃูุฏ ูู ุชูุนูู Gemini API ูู Google Cloud Console',
    429: 'ุงูุชุธุฑ ุฏูููุฉ ูุงุญุฏุฉ ูุจู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู',
    500: 'ุฎุทุฃ ูุคูุช ูู ุงูุฎุงุฏูุ ุญุงูู ูุฑุฉ ุฃุฎุฑู ุจุนุฏ ูููู',
    503: 'ุงูุฎุฏูุฉ ุบูุฑ ูุชููุฑุฉ ูุคูุชุงูุ ุญุงูู ูุงุญูุงู'
  };
  
  return suggestions[statusCode] || 'ุญุงูู ูุฑุฉ ุฃุฎุฑู ุฃู ุชูุงุตู ูุน ุงูุฏุนู ุงูููู';
}

// Add route for legal document templates
app.get('/templates/:field', (req, res) => {
  const field = req.params.field;
  const templates = {
    'ูุงููู ูุฏูู': {
      structure: [
        'ุงูููุฏูุฉ',
        'ุงููุจุญุซ ุงูุฃูู: ููููู [ุงูููุถูุน] ูู ุงููุงููู ุงููุฏูู',
        'ุงููุทูุจ ุงูุฃูู: ุชุนุฑูู [ุงูููุถูุน]',
        'ุงููุทูุจ ุงูุซุงูู: ุฎุตุงุฆุต [ุงูููุถูุน]',
        'ุงููุจุญุซ ุงูุซุงูู: ุฃุญูุงู [ุงูููุถูุน] ูู ุงูุชุดุฑูุน ูุงูููู',
        'ุงููุทูุจ ุงูุฃูู: ุงูุฃุญูุงู ูู ุงููุงููู ุงููุฏูู ุงูุฌุฒุงุฆุฑู',
        'ุงููุทูุจ ุงูุซุงูู: ูููู ุงูููู ูุงููุถุงุก',
        'ุงูุฎุงุชูุฉ'
      ],
      keywords: ['ุงูุนูุฏ', 'ุงูุงูุชุฒุงู', 'ุงููุณุคูููุฉ', 'ุงูุญู ุงูุนููู', 'ุงูุญู ุงูุดุฎุตู']
    },
    'ูุงููู ุฌูุงุฆู': {
      structure: [
        'ุงูููุฏูุฉ',
        'ุงููุจุญุซ ุงูุฃูู: ูุงููุฉ [ุงูุฌุฑููุฉ/ุงูููุถูุน]',
        'ุงููุทูุจ ุงูุฃูู: ุชุนุฑูู ุงูุฌุฑููุฉ ูุฃุฑูุงููุง',
        'ุงููุทูุจ ุงูุซุงูู: ุฎุตุงุฆุต ูุดุฑูุท ุงูุฌุฑููุฉ',
        'ุงููุจุญุซ ุงูุซุงูู: ุงูุนููุจุฉ ูุงูุฌุฒุงุก',
        'ุงููุทูุจ ุงูุฃูู: ุฃููุงุน ุงูุนููุจุงุช',
        'ุงููุทูุจ ุงูุซุงูู: ุธุฑูู ุงูุชุดุฏูุฏ ูุงูุชุฎููู',
        'ุงูุฎุงุชูุฉ'
      ],
      keywords: ['ุงูุฌุฑููุฉ', 'ุงูุฑูู ุงููุงุฏู', 'ุงูุฑูู ุงููุนููู', 'ุงูุนููุจุฉ', 'ุงููุตุฏ ุงูุฌูุงุฆู']
    }
  };
  
  res.json(templates[field] || { structure: [], keywords: [] });
});

// Add route for legal definitions
app.get('/definitions/:term', (req, res) => {
  const term = req.params.term;
  const definitions = {
    'ุงููุงููู': 'ูุฌููุนุฉ ุงูููุงุนุฏ ุงูุนุงูุฉ ุงููุฌุฑุฏุฉ ุงูุชู ุชูุธู ุณููู ุงูุฃูุฑุงุฏ ูู ุงููุฌุชูุน ูุงูููุชุฑูุฉ ุจุฌุฒุงุก ุชููุนู ุงูุณูุทุฉ ุงูุนุงูุฉ',
    'ุงูุนูุฏ': 'ุงุชูุงู ููุชุฒู ุจููุฌุจู ุดุฎุต ุฃู ุฃุดุฎุงุต ุขุฎุฑูู ุจููุญ ุฃู ูุนู ุฃู ุนุฏู ูุนู ุดูุก ูุง',
    'ุงูุฌุฑููุฉ': 'ูู ูุนู ุฃู ุงูุชูุงุน ูุฎุงูู ูููุงููู ุงูุฌูุงุฆู ููุนุงูุจ ุนููู ุจููุชุถุงู',
    'ุงูุญู': 'ุงุณุชุฆุซุงุฑ ููุฑู ุงููุงููู ููุญููู ูุดุฎุต ูุนูู ุนูู ุดูุก ูุนูู'
  };
  
  res.json({ 
    term: term, 
    definition: definitions[term] || 'ุงูุชุนุฑูู ุบูุฑ ูุชููุฑ' 
  });
});

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// ุฅุถุงูุฉ endpoint ูุฅุนุงุฏุฉ ุชุนููู ุงููุธุงู
app.post('/reset', (req, res) => {
  requestCount = 0;
  lastResetTime = Date.now();
  resetKeyStats();
  console.log('ุชู ุฅุนุงุฏุฉ ุชุนููู ุงููุธุงู ูุฏููุงู');
  res.json({ 
    message: 'ุชู ุฅุนุงุฏุฉ ุชุนููู ุงููุธุงู ุจูุฌุงุญ', 
    requestCount: 0,
    keysReset: true
  });
});

// ุฅุถุงูุฉ endpoint ููุญุต ุญุงูุฉ ุงููุธุงู
app.get('/status', (req, res) => {
  const keyStats = API_KEYS.map((keyObj, index) => ({
    keyIndex: index + 1,
    name: keyObj.name,
    type: keyObj.type,
    keyEnd: keyObj.key.slice(-8),
    usageCount: keyUsageCount[index],
    failureCount: keyFailureCount[index],
    isActive: keyFailureCount[index] < 5
  }));

  res.json({
    requestCount,
    maxRequests: MAX_REQUESTS_PER_MINUTE,
    lastReset: new Date(lastResetTime).toLocaleString('ar-EG'),
    uptime: Math.floor(process.uptime()),
    memory: process.memoryUsage(),
    apiKeys: {
      total: API_KEYS.length,
      current: currentKeyIndex + 1,
      stats: keyStats
    }
  });
});

// ุฅุถุงูุฉ endpoint ูุชุจุฏูู ุงูููุชุงุญ ูุฏููุงู
app.post('/switch-key', (req, res) => {
  const { keyIndex } = req.body;
  
  if (keyIndex >= 0 && keyIndex < API_KEYS.length) {
    currentKeyIndex = keyIndex;
    console.log(`ุชู ุชุจุฏูู ุงูููุชุงุญ ูุฏููุงู ุฅูู ุฑูู: ${currentKeyIndex + 1}`);
    res.json({ 
      message: `ุชู ุชุจุฏูู ุงูููุชุงุญ ุฅูู ุฑูู ${currentKeyIndex + 1}`,
      currentKey: currentKeyIndex + 1,
      keyEnd: API_KEYS[currentKeyIndex].slice(-8)
    });
  } else {
    res.status(400).json({ error: 'ุฑูู ููุชุงุญ ุบูุฑ ุตุญูุญ' });
  }
});

app.listen(port, () => {
  console.log(`Research server running at http://localhost:${port}`);
  console.log(`Status: http://localhost:${port}/status`);
});
